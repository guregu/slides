DynamoDB and Go (v2)
Wondershake社内LT会
14 Sep 2017

Gregory Roseberry
Wondershake
greg@toki.waseda.jp
https://github.com/guregu

* What is DynamoDB?

- NoSQL database, (almost) no schema
- AWS service
- Scalable and predictable
- Pay mostly based on capacity. How many max reads/writes per second do you want?

* Primary key(s)

Every table has a hash key, used for sharding. This is unique per item. 

Unless you specify a range key too, which is a secondary key used for sorting and stuff.

Example: Image hosting

- Hash key: Image ID

Example: Message board posts

- Hash key: Thread ID
- Range key: Date

* Indexes

- Local secondary index: same hash key, an extra range key. 

Example: Message board, use Thread ID and UserID index to filter a thread by users.

- Global secondary index: an extra hash key and optionally range key.

Example: UserID to get all posts made by a certain user. 

* Console

Handy console for viewing/editing data and managing tables.

.image images.png

* Official library

- github.com/awslabs/aws-sdk-go/service/dynamodb

All your items are shoved into a struct like this

	type AttributeValue struct {
		// A Binary data type.
		B []byte `type:"blob"`
		// A Boolean data type.
		BOOL *bool `type:"boolean"`
		// A Binary Set data type.
		BS [][]byte `type:"list"`
		// A List of attribute values.
		L []*AttributeValue `type:"list"`
		// A Map of attribute values.
		M *map[string]*AttributeValue `type:"map"`
		// A Number data type.
		N *string `type:"string"`
		// A Number Set data type.
		NS []*string `type:"list"`
		// A Null data type.
		NULL *bool `type:"boolean"`
		// A String data type.
		S *string `type:"string"`
		// A String Set data type.
		SS []*string `type:"list"`
	}

* guregu/dynamo

Library by me, inspired by mgo.

- Mostly stable
- Focused on ease of use

Pass dynamo your AWS creds.

	import (
		"github.com/aws/aws-sdk-go/aws"
		"github.com/aws/aws-sdk-go/aws/session"
		"github.com/guregu/dynamo"
	)

	var dynamoDB = newDynamo()

	func newDynamo() *dynamo.DB {
		return dynamo.New(session.New(), &aws.Config{
			Region: aws.String("us-west-2")
		})
	}

* Creating a table

	type AdStats struct {
		ID		int `dynamo:",hash" // Primary key (hash key)
		Imps  	int
		Clicks	int

		UpdatedAt time.Time `dynamo:",omitempty"`
	}

	err := dynamoDB.CreateTable("Locari-AdStats").Provision(1, 5).Run()

* Putting an item

	func (a *AdStats) Save() error {
		a.UpdatedAt = time.Now().UTC()
		table := dynamoDB.Table("Locari-AdStats")
		return table.Put(a).Run()
	}

guregu/dynamo uses reflection to create AttributeValues for you, much like encoding/json standard library.

* Conditional puts

You can specify conditions that a put must satisfy to succeed. 

	func (a AdStats) Create() error {
		table := dynamoDB.Table("Locari-AdStats")
		return table.Put(a).If("attribute_not_exists(ID)").Run()
	}

If the item already exists, you get a ConditionalCheckFailedException from AWS.

* Getting an item

	func GetAdStats(id int) (AdStats, error) {
		table := dynamoDB.Table("Locari-AdStats")
		var a AdStats
		err := table.Get("ID", id).One(&a)
		return a, err
	}

* Update an item: atomic increments 
	
	func (a *AdStats) Increment(imps, clicks int) error {
		table := dynamoDB.Table("Locari-AdStats")
		return table.Update("ID", a.ID).
			Add("Imps", imps).
			Add("Clicks", clicks).
			Set("UpdatedAt", time.Now().UTC().Format(time.RFC3339)).
			Value(a)
	}

* Custom types

Dynamo will try its best with reflection to get the right type, but you can write your own serialization/deserialzation methods as well. (PS: Don't use this)

	type unixTime struct {
	    time.Time
	}

	func (ut unixTime) MarshalDynamo() (*dynamodb.AttributeValue, error) {
	    num := strconv.FormatInt(ut.Unix(), 10)
	    av := dynamodb.AttributeValue{
	        N: aws.String(num),
	    }
	    return av, nil
	}

	func (ut *unixTime) UnmarshalDynamo(av *dynamodb.AttributeValue) error {
	    sec, err := strconv.ParseInt(*av.N, 10, 64)
	    if err != nil {
	        return err
	    }
	    *ut = unixTime{time.Unix(sec, 0)}
	    return nil
	}

* Scan

Get all items in the table.

	table := dynamoDB.Table("Locari-AdStats")
	var stats []AdStats
	err := table.Scan().All(&stats)

Filter results and iterate one by one.

	func recrawl(cutoff time.Time) error {
		itr := dynamoDB.Table(itemTableName).Scan().Filter("Crawled < ?", cutoff.UTC()).Iter()
		var item Item
		for itr.Next(&item) {
			msg := &sqs.SendMessageInput{
				QueueUrl:    queueURL,
				MessageBody: &item.URL,
			}
			_, err := crawlQueue.SendMessage(msg)
			if err != nil {
				return err
			}
		}
		return itr.Err()
	}


* Much more

- Sets ([]string or map[string]struct{})
- Deleting items and tables
- Modifying tables
- Batch get/put/delete.

* Still under development

But almost done?

- Parallel scan
- Better docs
- Something else?

Send me a PR!

.link https://github.com/guregu/dynamo